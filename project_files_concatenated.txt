---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\concatenate_project_files.py ----
import os

def concat_files(directory, output_file):
    with open(output_file, 'w') as outfile:
        for subdir, dirs, files in os.walk(directory):
            for file in files:
                filepath = subdir + os.sep + file

                # Check for Python and HTML files
                if filepath.endswith(".py") or filepath.endswith(".html"):
                    with open(filepath, 'r') as infile:
                        outfile.write(f"---- {filepath} ----\n")
                        outfile.write(infile.read())
                        outfile.write("\n\n")

# Set the directory of your project here
project_directory = r'F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking'

# The output file where all the contents will be concatenated
output_file = r'F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\project_files_concatenated.txt'

# Call the function
concat_files(project_directory, output_file)


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\manage.py ----
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "escape_room_booking.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\test_regex.py ----
import re

def test_time_regex():
    pattern = r'^(0?[1-9]|1[0-2]):\d{2} (AM|PM)$'
    time_strings = ['09:00 AM', '12:30 PM', '9:45 AM', '10:00 PM', '25:00 AM', '09:00', 'AM 09:00']

    for time_str in time_strings:
        if re.match(pattern, time_str):
            print(f"Match: {time_str}")
        else:
            print(f"No match: {time_str}")

if __name__ == '__main__':
    test_time_regex()

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\booking\admin.py ----
from django.contrib import admin
from .models import EscapeRoom, Booking

@admin.register(EscapeRoom)
class EscapeRoomAdmin(admin.ModelAdmin):
    list_display = ('name', 'difficulty', 'duration', 'price')
    search_fields = ('name', 'description')

@admin.register(Booking)
class BookingAdmin(admin.ModelAdmin):
    list_display = ('user', 'room', 'date', 'start_time', 'end_time', 'num_participants', 'total_price')
    list_filter = ('date', 'room')
    search_fields = ('user__username', 'room__name')

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\booking\apps.py ----
from django.apps import AppConfig


class BookingConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "booking"


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\booking\forms.py ----
import re
from django import forms
from .models import Booking

class BookingForm(forms.ModelForm):
    class Meta:
        model = Booking
        fields = ['date', 'start_time', 'end_time', 'num_participants']
        widgets = {
            'date': forms.DateInput(attrs={'type': 'date'}),
            'start_time': forms.TimeInput(attrs={'class': 'timepicker'}),
            'end_time': forms.TimeInput(attrs={'class': 'timepicker'}),
            'num_participants': forms.NumberInput(attrs={'min': 1, 'max': 10}),
        }
    
    def validate_time(self, time):
        time_str = time.strftime('%H:%M')
        pattern = r'^([01]\d|2[0-3]):([0-5]\d)$'
        if not re.match(pattern, time_str):
            raise forms.ValidationError('Enter a valid time.')
        return time

    
    def clean_start_time(self):
        start_time = self.cleaned_data.get('start_time')
        print(f"Cleaned start_time: {start_time}")  # Debug statement
        print(f"Type of start_time: {type(start_time)}")  # Debug statement
        if not self.validate_time(start_time):
            raise forms.ValidationError("Invalid start time format. Please use HH:MM AM/PM format.")
        return start_time

    def clean_end_time(self):
        end_time = self.cleaned_data.get('end_time')
        print(f"Cleaned end_time: {end_time}")  # Debug statement
        print(f"Type of end_time: {type(end_time)}")  # Debug statement
        if not self.validate_time(end_time):
            raise forms.ValidationError("Invalid end time format. Please use HH:MM AM/PM format.")
        return end_time

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\booking\models.py ----
from django.db import models
from django.contrib.auth.models import User

class EscapeRoom(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    difficulty = models.IntegerField()  # Changed from CharField to IntegerField
    duration = models.IntegerField()
    capacity = models.IntegerField()
    price = models.DecimalField(max_digits=8, decimal_places=2)
    image = models.ImageField(upload_to='room_images/', null=True, blank=True)
    availability = models.BooleanField(default=True)  # Adjust the field type as needed

    def __str__(self):
        return self.name

class Booking(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    room = models.ForeignKey(EscapeRoom, on_delete=models.CASCADE)
    date = models.DateField()
    start_time = models.TimeField()
    end_time = models.TimeField()
    num_participants = models.IntegerField()
    total_price = models.DecimalField(max_digits=8, decimal_places=2)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.user.username} - {self.room.name} - {self.date}"

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\booking\tests.py ----
from django.test import TestCase

# Create your tests here.


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\booking\urls.py ----
from django.urls import path
from django.conf import settings
from django.conf.urls.static import static
from . import views

app_name = 'booking'

urlpatterns = [
    path('escape-rooms/', views.escape_room_list, name='escape_room_list'),
    path('escape-rooms/<int:room_id>/', views.escape_room_detail, name='escape_room_detail'),
    path('escape-rooms/<int:room_id>/book/', views.create_booking, name='create_booking'),
    path('bookings/<int:booking_id>/confirmation/', views.booking_confirmation, name='booking_confirmation'),
] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\booking\views.py ----
import datetime
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.utils import timezone
from .models import EscapeRoom, Booking
from .forms import BookingForm
from django.contrib.auth.decorators import login_required

@login_required
def create_booking(request, room_id):
    escape_room = get_object_or_404(EscapeRoom, id=room_id)
    if request.method == 'POST':
        form = BookingForm(request.POST)
        print("Submitted form data:")
        print(request.POST)
        if form.is_valid():
            booking = form.save(commit=False)
            booking.user = request.user
            booking.room = escape_room

            start_time = form.cleaned_data['start_time']
            end_time = form.cleaned_data['end_time']

            # Validate start and end times
            try:
                print("Parsed start_time:", start_time)  # Debug statement
                print("Parsed end_time:", end_time)  # Debug statement
            except ValueError:
                form.add_error('start_time', 'Enter a valid time.')
                form.add_error('end_time', 'Enter a valid time.')
            else:
                # Check if end time is after start time
                if end_time <= start_time:
                    form.add_error('end_time', 'End time must be after start time.')

            if not form.errors:
                # Validate availability and capacity
                if not is_available(booking):
                    messages.error(request, 'The selected time slot is not available.')
                    return redirect('booking:escape_room_detail', room_id=room_id)

                if booking.num_participants > escape_room.capacity:
                    messages.error(request, 'The number of participants exceeds the room capacity.')
                    return redirect('booking:escape_room_detail', room_id=room_id)

                # Validate fully booked days
                if is_fully_booked(booking.date):
                    messages.error(request, 'The selected day is fully booked.')
                    return redirect('booking:escape_room_detail', room_id=room_id)

                # Calculate total price
                booking.total_price = calculate_price(booking)

                booking.save()
                return redirect('booking:booking_confirmation', booking_id=booking.id)
        else:
            print("Form errors:", form.errors)  # Debug statement
    else:
        form = BookingForm()

    context = {
        'escape_room': escape_room,
        'form': form,
    }
    return render(request, 'booking/escape_room_detail.html', context)

def is_available(booking):
    # Check if the selected date and time slot are available
    overlapping_bookings = Booking.objects.filter(
        room=booking.room,
        date=booking.date,
        start_time__lt=booking.end_time,
        end_time__gt=booking.start_time,
    )
    return not overlapping_bookings.exists()

def is_fully_booked(date):
    # Check if the selected date is fully booked
    bookings = Booking.objects.filter(date=date)
    available_slots = EscapeRoom.objects.filter(availability=True).count() * 12
    booked_slots = bookings.count()
    return booked_slots >= available_slots

def calculate_price(booking):
    # Calculate the total price based on duration and number of participants
    base_price = booking.room.price
    additional_cost_per_participant = 10
    total_price = base_price + (booking.num_participants * additional_cost_per_participant)
    return total_price

def escape_room_detail(request, room_id):
    escape_room = get_object_or_404(EscapeRoom, id=room_id)
    if escape_room.image and escape_room.image.url:
        print(escape_room.image.url)  # Print the image URL
    return render(request, 'booking/escape_room_detail.html', {'escape_room': escape_room})

def escape_room_list(request):
    rooms = EscapeRoom.objects.all()  # Fetches all EscapeRoom objects from the database
    return render(request, 'booking/escape_room_list.html', {'escape_rooms': rooms})

def booking_confirmation(request, booking_id):
    booking = get_object_or_404(Booking, pk=booking_id)
    return render(request, 'booking/booking_confirmation.html', {'booking': booking})

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\booking\__init__.py ----


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\booking\management\commands\load_data.py ----
from django.core.management.base import BaseCommand
from booking.models import EscapeRoom

class Command(BaseCommand):
    help = 'Preloads initial escape room data into the database'

    def handle(self, *args, **options):
        # Check if any EscapeRoom data already exists to prevent duplicate entries
        if EscapeRoom.objects.exists():
            self.stdout.write(self.style.WARNING('Initial data already loaded!'))
        else:
            # Data to preload
            rooms = [
                EscapeRoom(name="Pirate's Cove", description="Find the hidden treasure before time runs out.", difficulty=5, capacity=5, duration=60, price=25.00),
                EscapeRoom(name="Haunted Mansion", description="Escape the ghosts that haunt this creepy old house.", difficulty=7, capacity=6, duration=60, price=30.00)
            ]
            EscapeRoom.objects.bulk_create(rooms)
            self.stdout.write(self.style.SUCCESS('Successfully loaded initial data'))


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\booking\migrations\0001_initial.py ----
# Generated by Django 5.0.4 on 2024-05-02 10:25

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="EscapeRoom",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("difficulty", models.IntegerField()),
                ("duration", models.IntegerField()),
                ("capacity", models.IntegerField()),
                ("price", models.DecimalField(decimal_places=2, max_digits=8)),
                (
                    "image",
                    models.ImageField(blank=True, null=True, upload_to="room_images/"),
                ),
                ("availability", models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name="Booking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                ("num_participants", models.IntegerField()),
                ("total_price", models.DecimalField(decimal_places=2, max_digits=8)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="booking.escaperoom",
                    ),
                ),
            ],
        ),
    ]


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\booking\migrations\__init__.py ----


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\booking\templates\booking\booking_confirmation.html ----
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>Booking Confirmation</h1>
    <p>Thank you for your booking!</p>
    <div>
        <p><strong>Escape Room:</strong> {{ booking.room.name }}</p>
        <p><strong>Date:</strong> {{ booking.date }}</p>
        <p><strong>Start Time:</strong> {{ booking.start_time }}</p>
        <p><strong>End Time:</strong> {{ booking.end_time }}</p>
        <p><strong>Number of Participants:</strong> {{ booking.num_participants }}</p>
        <p><strong>Total Price:</strong> ${{ booking.total_price }}</p>
    </div>
    <a href="{% url 'booking:escape_room_list' %}" class="btn btn-primary">Back to Escape Rooms</a>
</div>
{% endblock %}

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\booking\templates\booking\escape_room_detail.html ----
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>{{ escape_room.name }}</h1>
    <div class="row">
        <div class="col-md-6">
            {% if escape_room.image %}
            <img src="{{ escape_room.image.url }}" class="img-fluid" alt="{{ escape_room.name }}">
            {% endif %}
        </div>
        <div class="col-md-6">
            <p><strong>Description:</strong> {{ escape_room.description }}</p>
            <p><strong>Difficulty:</strong> {{ escape_room.difficulty }}</p>
            <p><strong>Duration:</strong> {{ escape_room.duration }} minutes</p>
            <p><strong>Capacity:</strong> {{ escape_room.capacity }} players</p>
            <p><strong>Price:</strong> ${{ escape_room.price }}</p>
            
            <form method="post" action="{% url 'booking:create_booking' escape_room.id %}">
                {% csrf_token %}
                {{ form.as_p }}
                <button type="submit" class="btn btn-primary">Book Now</button>
            </form>

            {% if form.errors %}
            <div class="alert alert-danger">
                <strong>Form submission failed:</strong>
                <ul>
                    {% for field in form %}
                        {% for error in field.errors %}
                            <li><strong>{{ field.label }}:</strong> {{ error }}</li>
                        {% endfor %}
                    {% endfor %}
                    {% for error in form.non_field_errors %}
                        <li>{{ error }}</li>
                    {% endfor %}
                </ul>
            </div>
            {% endif %}
        </div>
    </div>
</div>

<script>
    $(document).ready(function() {
      $('.timepicker').timepicker({
          timeFormat: 'h:i A',
          interval: 60,
          minTime: '9:00am',
          maxTime: '9:00pm',
          startTime: '9:00am',
          dynamic: false,
          dropdown: true,
          scrollbar: true
      });

      $('#id_start_time').on('changeTime', function() {
          var startTime = $(this).val();
          var minEndTime = moment(startTime, 'h:mm a').add(1, 'hour').format('h:mm a');
          var maxEndTime = moment(startTime, 'h:mm a').add(3, 'hour').format('h:mm a');
          $('#id_end_time').timepicker('option', 'minTime', minEndTime);
          $('#id_end_time').timepicker('option', 'maxTime', maxEndTime);
      });

      $('form').on('submit', function() {
          var startTime = $('#id_start_time').val();
          var endTime = $('#id_end_time').val();
          $('#id_start_time').val(moment(startTime, 'h:mm A').format('HH:mm'));
          $('#id_end_time').val(moment(endTime, 'h:mm A').format('HH:mm'));
      });
  });
  </script>
{% endblock %}


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\booking\templates\booking\escape_room_list.html ----
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>Escape Rooms</h1>
    <div class="row">
        {% for room in escape_rooms %}
        <div class="col-md-4">
            <div class="card mb-4">
                {% if room.image %}
                <img src="{{ room.image.url }}" class="card-img-top" alt="{{ room.name }}">
                {% endif %}
                <div class="card-body">
                    <h5 class="card-title">{{ room.name }}</h5>
                    <p class="card-text">{{ room.description|truncatewords:20 }}</p>
                    <a href="{% url 'booking:escape_room_detail' room.id %}" class="btn btn-primary">View Details</a>
                </div>
            </div>
        </div>
        {% empty %}
        <div class="col">
            <p>No escape rooms available.</p>
        </div>
        {% endfor %}
    </div>
</div>
{% endblock %}

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\escape_room_booking\asgi.py ----
"""
ASGI config for escape_room_booking project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "escape_room_booking.settings")

application = get_asgi_application()


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\escape_room_booking\settings.py ----
"""
Django settings for escape_room_booking project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

from django.conf import settings
from django.conf.urls.static import static

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-_#ec4$utr+c@*!h6l#*d&2$w3fwheg7kzo4(+c6bhw9f$))m)i"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "escape_room_booking",
    "booking",
    "users",
    "payments",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "escape_room_booking.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "escape_room_booking.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'escape_room_db_python',
        'USER': 'root',
        'PASSWORD': 'Poop319!',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'static_collected')


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

MEDIA_ROOT = os.path.join(BASE_DIR, 'room_images')
MEDIA_URL = '/media/'



---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\escape_room_booking\urls.py ----
"""
URL configuration for escape_room_booking project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from . import views
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('users/', include('users.urls')),
    path('booking/', include('booking.urls')),
    path('', views.home, name='home'),
] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\escape_room_booking\views.py ----
from django.shortcuts import render

def home(request):
    return render(request, 'escape_room_booking/home.html')

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\escape_room_booking\wsgi.py ----
"""
WSGI config for escape_room_booking project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "escape_room_booking.settings")

application = get_wsgi_application()


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\escape_room_booking\__init__.py ----


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\escape_room_booking\templates\base.html ----
{% load static %}
<!DOCTYPE html>
<html>
<head>
    <title>{% block title %}Escape Room Booking{% endblock %}</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <link rel="stylesheet" href="{% static 'css/jquery.timepicker.min.css' %}">
    <script src="{% static 'js/jquery-3.7.1.min.js' %}"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="{% static 'js/jquery.timepicker.min.js' %}"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <a class="navbar-brand" href="{% url 'home' %}">Escape Room Booking</a>
            <ul class="navbar-nav ml-auto">
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'booking:escape_room_list' %}">Escape Rooms</a>
                </li>
                {% if user.is_authenticated %}
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'profile' %}">Welcome, {{ user.username }}</a>
                    </li>
                    <li class="nav-item">
                        <form action="{% url 'logout' %}" method="post" style="display: inline;">
                            {% csrf_token %}
                            <button type="submit" class="btn btn-link nav-link">Logout</button>
                        </form>
                    </li>
                {% else %}
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'register' %}">Register</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'login' %}">Login</a>
                    </li>
                {% endif %}
            </ul>
        </nav>
    </header>
    
    <main>
        {% block content %}
        {% endblock %}
    </main>

    <footer>
        <!-- Add footer content -->
    </footer>
</body>
</html>

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\escape_room_booking\templates\escape_room_booking\home.html ----
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>Welcome to Escape Room Booking</h1>
    <p>Explore and book amazing escape rooms!</p>

    <div class="row">
        <div class="col-md-12">
            <a href="{% url 'booking:escape_room_list' %}" class="btn btn-primary btn-lg">View Escape Rooms</a>
        </div>
    </div>
</div>
{% endblock %}

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\payments\admin.py ----
from django.contrib import admin

# Register your models here.


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\payments\apps.py ----
from django.apps import AppConfig


class PaymentsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "payments"


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\payments\models.py ----
from django.db import models

# Create your models here.


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\payments\tests.py ----
from django.test import TestCase

# Create your tests here.


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\payments\views.py ----
from django.shortcuts import render

# Create your views here.


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\payments\__init__.py ----


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\payments\migrations\__init__.py ----


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\users\admin.py ----
from django.contrib import admin
from .models import UserProfile

@admin.register(UserProfile)
class UserProfileAdmin(admin.ModelAdmin):
    list_display = ('user', 'phone_number', 'address')
    search_fields = ('user__username', 'phone_number')

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\users\apps.py ----
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "users"


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\users\forms.py ----
from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User

class UserRegistrationForm(UserCreationForm):
    email = forms.EmailField(required=True)
    first_name = forms.CharField(required=True)
    last_name = forms.CharField(required=True)

    class Meta:
        model = User
        fields = ['username', 'email', 'first_name', 'last_name', 'password1', 'password2']
        
class UserUpdateForm(forms.ModelForm):
    email = forms.EmailField()

    class Meta:
        model = User
        fields = ['username', 'email', 'first_name', 'last_name']

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\users\models.py ----
from django.db import models
from django.contrib.auth.models import User

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    phone_number = models.CharField(max_length=20)
    address = models.CharField(max_length=200)
    is_admin = models.BooleanField(default=False)

    def __str__(self):
        return self.user.username

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\users\tests.py ----
from django.test import TestCase

# Create your tests here.


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\users\urls.py ----
from . import views
from django.contrib.auth import views as auth_views
from django.contrib import admin
from django.urls import path, include
from . import views
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('register/', views.register, name='register'),
    path('login/', views.user_login, name='login'),
    path('profile/', views.profile, name='profile'),
    path('profile/update/', views.update_profile, name='update_profile'),
    path('profile/change-password/', views.change_password, name='change_password'),
    path('logout/', auth_views.LogoutView.as_view(template_name='users/logout.html', next_page='home'), name='logout'),
] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\users\views.py ----
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login
from .forms import UserRegistrationForm
from django.contrib.auth.decorators import login_required
from .forms import UserUpdateForm
from django.contrib.auth.forms import PasswordChangeForm
from django.contrib import messages

def register(request):
    if request.method == 'POST':
        form = UserRegistrationForm(request.POST)
        if form.is_valid():
            user = form.save()
            user.first_name = form.cleaned_data.get('first_name')
            user.last_name = form.cleaned_data.get('last_name')
            user.save()
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password1')
            user = authenticate(username=username, password=password)
            login(request, user)
            return redirect('home')
    else:
        form = UserRegistrationForm()
    return render(request, 'users/register.html', {'form': form})

def user_login(request):
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('home')
        else:
            # Handle invalid login
            pass
    return render(request, 'users/login.html')

@login_required
def profile(request):
    return render(request, 'users/profile.html')

@login_required
def profile(request):
    return render(request, 'users/profile.html')

@login_required
def update_profile(request):
    if request.method == 'POST':
        form = UserUpdateForm(request.POST, instance=request.user)
        if form.is_valid():
            form.save()
            messages.success(request, 'Your profile has been updated.')
            return redirect('profile')
    else:
        form = UserUpdateForm(instance=request.user)
    return render(request, 'users/update_profile.html', {'form': form})

@login_required
def change_password(request):
    if request.method == 'POST':
        form = PasswordChangeForm(request.user, request.POST)
        if form.is_valid():
            user = form.save()
            messages.success(request, 'Your password has been changed.')
            return redirect('profile')
    else:
        form = PasswordChangeForm(request.user)
    return render(request, 'users/change_password.html', {'form': form})

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\users\__init__.py ----


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\users\migrations\0001_initial.py ----
# Generated by Django 5.0.4 on 2024-04-30 01:28

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("phone_number", models.CharField(max_length=20)),
                ("address", models.CharField(max_length=200)),
                ("is_admin", models.BooleanField(default=False)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\users\migrations\__init__.py ----


---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\users\templates\users\change_password.html ----
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h2>Change Password</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="btn btn-primary">Change Password</button>
    </form>
</div>
{% endblock %}

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\users\templates\users\login.html ----
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h2>User Login</h2>
    <form method="post">
        {% csrf_token %}
        <div class="form-group">
            <label for="username">Username:</label>
            <input type="text" class="form-control" name="username" required>
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <input type="password" class="form-control" name="password" required>
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
    </form>
</div>
{% endblock %}

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\users\templates\users\logout.html ----
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h2>Logged Out</h2>
    <p>You have been successfully logged out.</p>
    <p><a href="{% url 'login' %}">Click here</a> to log in again.</p>
</div>
{% endblock %}

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\users\templates\users\profile.html ----
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h2>Profile</h2>
    <div class="row">
        <div class="col-md-6">
            <p><strong>Username:</strong> {{ user.username }}</p>
            <p><strong>Email:</strong> {{ user.email }}</p>
            <p><strong>First Name:</strong> {{ user.first_name }}</p>
            <p><strong>Last Name:</strong> {{ user.last_name }}</p>
        </div>
        <div class="col-md-6">
            <a href="{% url 'update_profile' %}" class="btn btn-primary">Update Profile</a>
            <a href="{% url 'change_password' %}" class="btn btn-primary">Change Password</a>
        </div>
    </div>
</div>
{% endblock %}

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\users\templates\users\register.html ----
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h2>User Registration</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="btn btn-primary">Register</button>
    </form>
</div>
{% endblock %}

---- F:\COLLEGE\SEMESTER 5\PYTHON II\FINAL PROJECT\Python-EscapeRoomAppointmentSystem\escape_room_booking\users\templates\users\update_profile.html ----
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h2>Update Profile</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="btn btn-primary">Update</button>
    </form>
</div>
{% endblock %}

